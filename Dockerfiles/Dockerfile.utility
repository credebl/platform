# Stage 1: Build the application
FROM node:18-slim as build
RUN npm install -g pnpm

# Add PostgreSQL client to the image
RUN apk add --no-cache postgresql-client

RUN apt-get update -y
RUN apt-get --no-install-recommends install -y openssl
# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package.json ./

# Install dependencies
RUN pnpm install

RUN pnpm add -D ts-node typescript @types/node

# Copy the rest of the application code
COPY . .

RUN chown -R node:node /app/libs/prisma-service/prisma/scripts/
RUN chmod +x /app/libs/prisma-service/prisma/scripts/geo_location_data_import.sh
RUN chmod +x /app/libs/prisma-service/prisma/scripts/update_client_credential_data.sh

# RUN cd libs/prisma-service && npx prisma migrate deploy && npx prisma generate
RUN cd libs/prisma-service && npx prisma migrate deploy && npx prisma generate && npx prisma db seed

# Build the user service
RUN pnpm run build utility

# Stage 2: Create the final image
FROM node:18-slim

RUN apt-get update -y
RUN apt-get --no-install-recommends install -y openssl
# Set the working directory
WORKDIR /app
RUN npm install -g pnpm

# Copy the compiled code from the build stage
COPY --from=build /app/dist/apps/utility/ ./dist/apps/utility/

# Copy the libs folder from the build stage
COPY --from=build /app/libs/ ./libs/
#COPY --from=build /app/package.json ./  
COPY --from=build /app/node_modules  ./node_modules


# Set the command to run the microservice
CMD ["sh", "-c", "cd libs/prisma-service && npx prisma migrate deploy && npx prisma db seed && cd ../.. && node dist/apps/utility/main.js"]
