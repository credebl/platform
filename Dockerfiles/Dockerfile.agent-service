# Stage 1: Build the application
FROM node:18-alpine as build

RUN npm install -g pnpm --ignore-scripts \
    && apk update \
    && apk add openssh-client \
    && apk add aws-cli \
    && apk add docker \
    && apk add docker-compose 
    
RUN npm install -g pnpm
# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package.json ./

# Install dependencies
RUN pnpm i

# Copy the rest of the application code
COPY . .
RUN cd libs/prisma-service && npx prisma migrate deploy && npx prisma generate

# Build the user service
RUN pnpm run build agent-service

# Stage 2: Create the final image
FROM node:18-alpine

RUN npm install -g pnpm --ignore-scripts \
    && apk update \
    && apk add openssh-client \
    && apk add aws-cli \
    && apk add docker \
    && apk add docker-compose 

RUN npm install -g pnpm
# Set the working directory
WORKDIR /app

# Copy the compiled code from the build stage
COPY --from=build /app/dist/apps/agent-service/ ./dist/apps/agent-service/

# Copy the libs folder from the build stage
COPY --from=build /app/libs/ ./libs/
#COPY --from=build /app/package.json ./  
COPY --from=build /app/node_modules  ./node_modules

# Set the command to run the microservice
CMD ["sh", "-c", "cd libs/prisma-service && npx prisma migrate deploy && npx prisma migrate deploy && cd ../.. && node dist/apps/agent-service/main.js"]

# docker build -t agent-service -f Dockerfiles/Dockerfile.agent-service .
# docker run -d --env-file .env --name agent-service docker.io/library/agent-service
# docker logs -f agent-service
