generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                  Int               @id(map: "PK_cace4a159ff9f2512dd42373760") @default(autoincrement())
  createDateTime      DateTime          @default(now()) @db.Timestamptz(6)
  createdBy           Int               @default(1)
  lastChangedDateTime DateTime          @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int               @default(1)
  firstName           String?           @db.VarChar(500)
  lastName            String?           @db.VarChar(500)
  email               String?           @unique(map: "UQ_e12875dfb3b1d92d7d7c5377e22") @db.VarChar(500)
  username            String?           @db.VarChar(500)
  verificationCode    String?           @db.VarChar(500)
  isEmailVerified     Boolean           @default(false)
  supabaseUserId      String?           @db.VarChar(500)
  clientId            String?           @db.VarChar(500)
  clientSecret        String?           @db.VarChar(500)
  profileImg          String?
  fidoUserId          String?           @db.VarChar(1000)
  isFidoVerified      Boolean           @default(false)
  publicProfile       Boolean           @default(false)
  password            String?           @db.VarChar
  orgInvitations      org_invitations[]
  user_activities     user_activity[]
  userDevices         user_devices[]
  userOrgRoles        user_org_roles[]
}

model user_activity {
  id                  Int          @id @default(autoincrement())
  userId              Int
  orgId               Int
  action              String
  details             String
  createDateTime      DateTime     @default(now()) @db.Timestamptz(6)
  createdBy           Int          @default(1)
  lastChangedDateTime DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int          @default(1)
  deletedAt           DateTime?    @db.Timestamp(6)
  organisation        organisation @relation(fields: [orgId], references: [id])
  user                user         @relation(fields: [userId], references: [id])
}

model org_roles {
  id                  Int              @id @default(autoincrement())
  name                String           @unique
  description         String
  createDateTime      DateTime         @default(now()) @db.Timestamptz(6)
  createdBy           Int              @default(1)
  lastChangedDateTime DateTime         @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int              @default(1)
  deletedAt           DateTime?        @db.Timestamp(6)
  userOrgRoles        user_org_roles[]
}

model user_org_roles {
  id           Int           @id @default(autoincrement())
  userId       Int
  orgRoleId    Int
  orgId        Int?
  organisation organisation? @relation(fields: [orgId], references: [id])
  orgRole      org_roles     @relation(fields: [orgRoleId], references: [id])
  user         user          @relation(fields: [userId], references: [id])
}

model organisation {
  id                  Int               @id @default(autoincrement())
  createDateTime      DateTime          @default(now()) @db.Timestamptz(6)
  createdBy           Int               @default(1)
  lastChangedDateTime DateTime          @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int               @default(1)
  name                String?           @db.VarChar(500)
  description         String?           @db.VarChar(500)
  orgSlug             String?           @unique
  logoUrl             String?
  website             String?           @db.VarChar
  publicProfile       Boolean           @default(false)
  connections         connections[]
  credentials         credentials[]
  org_agents          org_agents[]
  orgInvitations      org_invitations[]
  presentations       presentations[]
  schema              schema[]
  user_activities     user_activity[]
  userOrgRoles        user_org_roles[]
}

model org_invitations {
  id                  Int          @id @default(autoincrement())
  createDateTime      DateTime     @default(now()) @db.Timestamptz(6)
  createdBy           Int          @default(1)
  lastChangedDateTime DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int          @default(1)
  deletedAt           DateTime?    @db.Timestamp(6)
  userId              Int
  orgId               Int
  status              String
  orgRoles            Int[]
  email               String?
  organisation        organisation @relation(fields: [orgId], references: [id])
  user                user         @relation(fields: [userId], references: [id])
}

model user_devices {
  id                  Int       @id(map: "PK_c9e7e648903a9e537347aba4371") @default(autoincrement())
  createDateTime      DateTime  @default(now()) @db.Timestamptz(6)
  createdBy           Int       @default(1)
  lastChangedDateTime DateTime  @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int       @default(1)
  devices             Json?     @default("[]")
  credentialId        String?   @unique(map: "UQ_7c903f5e362fe8fd3d3edba17b5") @db.VarChar
  deviceFriendlyName  String?   @db.VarChar
  userId              Int?
  deletedAt           DateTime? @db.Timestamp(6)
  authCounter         Int       @default(0)
  user                user?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_e12ac4f8016243ac71fd2e415af")
}

model platform_config {
  id                  Int       @id @default(autoincrement())
  externalIp          String    @db.VarChar
  lastInternalId      String    @db.VarChar
  username            String    @db.VarChar
  sgApiKey            String    @db.VarChar
  emailFrom           String    @db.VarChar
  apiEndpoint         String    @db.VarChar
  tailsFileServer     String    @db.VarChar
  createDateTime      DateTime  @default(now()) @db.Timestamptz(6)
  createdBy           Int       @default(1)
  lastChangedDateTime DateTime  @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int       @default(1)
  deletedAt           DateTime? @db.Timestamp(6)
}

model org_agents {
  id                  Int                 @unique @default(autoincrement())
  createDateTime      DateTime            @default(now()) @db.Timestamptz(6)
  createdBy           Int                 @default(1)
  lastChangedDateTime DateTime            @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int                 @default(1)
  orgDid              String              @db.VarChar
  verkey              String              @db.VarChar
  agentEndPoint       String              @db.VarChar
  agentId             Int?
  isDidPublic         Boolean
  agentSpinUpStatus   Int
  agentOptions        Bytes?
  walletName          String?             @db.VarChar
  tenantId            String?
  apiKey              String?
  agentsTypeId        Int
  orgId               Int
  orgAgentTypeId      Int
  ledgerId            Int?
  agent_invitations   agent_invitations[]
  agents              agents?             @relation(fields: [agentId], references: [id])
  agents_type         agents_type         @relation(fields: [agentsTypeId], references: [id])
  ledgers             ledgers?            @relation(fields: [ledgerId], references: [id])
  org_agent_type      org_agents_type     @relation(fields: [orgAgentTypeId], references: [id])
  organisation        organisation        @relation(fields: [orgId], references: [id])
}

model org_agents_type {
  id                  Int          @id @default(autoincrement())
  createDateTime      DateTime     @default(now()) @db.Timestamptz(6)
  createdBy           Int          @default(1)
  lastChangedDateTime DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int          @default(1)
  agent               String       @db.VarChar(500)
  org_agents          org_agents[]
}

model agents_type {
  id                  Int          @id @default(autoincrement())
  createDateTime      DateTime     @default(now()) @db.Timestamptz(6)
  createdBy           Int          @default(1)
  lastChangedDateTime DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int          @default(1)
  agent               String       @db.VarChar(500)
  org_agents          org_agents[]
}

model ledgers {
  id                  Int          @unique @default(autoincrement())
  createDateTime      DateTime     @default(now()) @db.Timestamptz(6)
  createdBy           Int          @default(1)
  lastChangedDateTime DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int          @default(1)
  name                String       @db.VarChar
  networkType         String       @db.VarChar
  poolConfig          String       @db.VarChar
  isActive            Boolean
  networkString       String       @db.VarChar
  registerDIDEndpoint String       @db.VarChar
  registerDIDPayload  Json?
  indyNamespace       String?      @db.VarChar
  org_agents          org_agents[]
}

model agents {
  id                  Int          @unique @default(autoincrement())
  createDateTime      DateTime     @default(now()) @db.Timestamptz(6)
  createdBy           Int          @default(1)
  lastChangedDateTime DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int          @default(1)
  name                String
  org_agents          org_agents[]
}

model schema {
  id                  Int          @id(map: "PK_c9e7e648903a9e537347aba4372") @default(autoincrement())
  createDateTime      DateTime     @default(now()) @db.Timestamptz(6)
  createdBy           Int          @default(1)
  lastChangedDateTime DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int          @default(1)
  name                String       @db.VarChar
  version             String       @db.VarChar
  attributes          String
  schemaLedgerId      String       @db.VarChar
  publisherDid        String       @db.VarChar
  ledgerId            Int          @default(1)
  issuerId            String       @db.VarChar
  orgId               Int
  organisation        organisation @relation(fields: [orgId], references: [id])
}

model credential_definition {
  id                     Int      @id(map: "PK_c9e7e648903a9e537347aba4373") @default(autoincrement())
  createDateTime         DateTime @default(now()) @db.Timestamptz(6)
  createdBy              Int      @default(1)
  lastChangedDateTime    DateTime @default(now()) @db.Timestamptz(6)
  lastChangedBy          Int      @default(1)
  credentialDefinitionId String   @db.VarChar
  tag                    String   @db.VarChar
  schemaLedgerId         String   @db.VarChar
  schemaId               Int      @default(1)
  orgId                  Int      @default(1)
  revocable              Boolean  @default(false)
}

model shortening_url {
  id          Int     @id @default(autoincrement())
  referenceId String? @db.VarChar(50)
  url         String?
  type        String?
}

model agent_invitations {
  id                   Int        @unique @default(autoincrement())
  orgId                Int        @default(1)
  agentId              Int        @default(1)
  connectionInvitation String
  multiUse             Boolean
  createDateTime       DateTime   @default(now()) @db.Timestamptz(6)
  createdBy            Int        @default(1)
  lastChangedDateTime  DateTime   @default(now()) @db.Timestamptz(6)
  lastChangedBy        Int        @default(1)
  org_agents           org_agents @relation(fields: [agentId], references: [id])
}

model connections {
  id                   Int          @id @default(autoincrement())
  createDateTime       DateTime     @default(now()) @db.Timestamptz(6)
  createdBy            Int          @default(1)
  lastChangedDateTime  DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy        Int          @default(1)
  connectionId         String       @unique
  state                String
  orgDid               String
  theirLabel           String
  autoAcceptConnection Boolean
  outOfBandId          String
  orgId                Int
  organisation         organisation @relation(fields: [orgId], references: [id])
}

model credentials {
  id                   Int          @id @default(autoincrement())
  createDateTime       DateTime     @default(now()) @db.Timestamptz(6)
  createdBy            Int          @default(1)
  lastChangedDateTime  DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy        Int          @default(1)
  connectionId         String       @unique
  threadId             String
  protocolVersion      String
  credentialAttributes Json[]
  orgId                Int
  organisation         organisation @relation(fields: [orgId], references: [id])
}

model presentations {
  id                  Int          @unique @default(autoincrement())
  createDateTime      DateTime     @default(now()) @db.Timestamptz(6)
  createdBy           Int          @default(1)
  lastChangedDateTime DateTime     @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int          @default(1)
  connectionId        String       @unique
  state               String?
  threadId            String?
  isVerified          Boolean?
  orgId               Int
  organisation        organisation @relation(fields: [orgId], references: [id])
}

model ecosystem_roles {
  id                  String           @id @default(uuid())
  name                String           @unique
  description         String
  createDateTime      DateTime         @default(now()) @db.Timestamptz(6)
  createdBy           Int              @default(1)
  lastChangedDateTime DateTime         @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int              @default(1)
  deletedAt           DateTime?        @db.Timestamp(6)
  ecosystemOrgs       ecosystem_orgs[]
}

model ecosystem {
  id                   String                  @id @default(uuid())
  name                 String
  description          String
  tags                 String
  createDateTime       DateTime                @default(now()) @db.Timestamptz(6)
  createdBy            Int                     @default(1)
  lastChangedDateTime  DateTime                @default(now()) @db.Timestamptz(6)
  lastChangedBy        Int                     @default(1)
  deletedAt            DateTime?               @db.Timestamp(6)
  logoUrl              String?
  ecosystemInvitations ecosystem_invitations[]
  ecosystemOrgs        ecosystem_orgs[]
  ecosystemUsers       ecosystem_users[]
}

model ecosystem_invitations {
  id                  String    @id @default(uuid())
  email               String
  status              String
  ecosystemId         String
  userId              String
  orgId               String
  createDateTime      DateTime  @default(now()) @db.Timestamptz(6)
  createdBy           Int       @default(1)
  lastChangedDateTime DateTime  @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int       @default(1)
  deletedAt           DateTime? @db.Timestamp(6)
  ecosystem           ecosystem @relation(fields: [ecosystemId], references: [id])
}

model ecosystem_users {
  id                  String    @id @default(uuid())
  userId              String
  ecosystemId         String
  createDateTime      DateTime  @default(now()) @db.Timestamptz(6)
  createdBy           Int       @default(1)
  lastChangedDateTime DateTime  @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int       @default(1)
  deletedAt           DateTime? @db.Timestamp(6)
  ecosystem           ecosystem @relation(fields: [ecosystemId], references: [id])
}

model ecosystem_orgs {
  id                     String                    @id @default(uuid())
  orgId                  String
  orgName                String?
  orgDid                 String?                    @db.VarChar
  status                 String
  ecosystemId            String
  ecosystemRoleId        String
  createDateTime         DateTime                  @default(now()) @db.Timestamptz(6)
  createdBy              Int                       @default(1)
  lastChangedDateTime    DateTime                  @default(now()) @db.Timestamptz(6)
  lastChangedBy          Int                       @default(1)
  deletedAt              DateTime?                 @db.Timestamp(6)
  ecosystem              ecosystem                 @relation(fields: [ecosystemId], references: [id])
  ecosystemRole          ecosystem_roles           @relation(fields: [ecosystemRoleId], references: [id])
  endorsementTransaction endorsement_transaction[]
}

model endorsement_transaction {
  id                  String         @id @default(uuid())
  endorserDid         String
  authorDid           String
  requestPayload      String
  responsePayload     String
  type                String?
  createDateTime      DateTime       @default(now()) @db.Timestamptz(6)
  createdBy           Int            @default(1)
  lastChangedDateTime DateTime       @default(now()) @db.Timestamptz(6)
  lastChangedBy       Int            @default(1)
  deletedAt           DateTime?      @db.Timestamp(6)
  status              String
  ecosystemOrgId      String
  requestBody         Json?
  ecosystemOrgs       ecosystem_orgs @relation(fields: [ecosystemOrgId], references: [id])
}

model ecosystem_config {
  id                     String                    @id @default(uuid())
  url                    String
  enableEcosystem        Boolean                   @default(false)
  autoEndorsement        Boolean                   @default(false)
  createDateTime         DateTime                  @default(now()) @db.Timestamptz(6)
  createdBy              Int                       @default(1)
  lastChangedDateTime    DateTime                  @default(now()) @db.Timestamptz(6)
  lastChangedBy          Int                       @default(1)
  deletedAt              DateTime?                 @db.Timestamp(6)  
}
